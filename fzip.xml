<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 254820 $ -->
 <reference id="ref.fzip">
  <title> functions</title>
  <titleabbrev></titleabbrev>

  <partintro>
   &warn.experimental;
   <para>
   </para>
  </partintro>


  <refentry id="function.">
   <refnamediv>
    <refname></refname>
    <refpurpose>*fz_load_model(const char *path);</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function></function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fz-save-model">
   <refnamediv>
    <refname>fz_save_model</refname>
    <refpurpose>*model, const char *path);</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fz_save_model</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.">
   <refnamediv>
    <refname></refname>
    <refpurpose>*fz_build_model(int num_docs, const char *(*get_callback)(int doc_index, int *doc_len, void *user_data), void (*release_callback)(const char *buf, void *user_data), void *callback_user_data);</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function></function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fz-release-model">
   <refnamediv>
    <refname>fz_release_model</refname>
    <refpurpose>*model);</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>fz_release_model</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fz-compress">
   <refnamediv>
    <refname>fz_compress</refname>
    <refpurpose>*model, const char *source, int source_len, char *dest, int dest_capacity);</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fz_compress</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.fz-decompress">
   <refnamediv>
    <refname>fz_decompress</refname>
    <refpurpose>*model, const char *source, int source_len, char *dest, int dest_capacity);</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>fz_decompress</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.const">
   <refnamediv>
    <refname>const</refname>
    <refpurpose>char *get_doc_callback(int doc_index, int *doc_len, void *user_data) {    char **docs = (char **)(user_data);    *doc_len = strlen(docs[doc_index]);    return docs[doc_index]; }</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef> <function>const</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.release-doc-callback">
   <refnamediv>
    <refname>release_doc_callback</refname>
    <refpurpose>const char *buf, void *user_data) {}</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>release_doc_callback</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.">
   <refnamediv>
    <refname></refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef> <function></function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
     &warn.experimental.func;
    <para>
     &warn.undocumented.func;
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

